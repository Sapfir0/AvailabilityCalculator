{"version":3,"sources":["config.ts","inversify/types.ts","services/ApiInteractionService.ts","typing.ts","Map/MapStore.ts","inversify/inversify.config.ts","services/hooks.ts","Map/Radio.tsx","Map/IsochroneSettings.tsx","Map/Map.tsx","App/App.tsx","index.tsx"],"names":["accessToken","geojsonFormat","type","data","features","isoLayer","id","source","layout","paint","TYPES","MapStore","Symbol","for","urlBase","getIso","lat","lon","a","profile","minutes","query","fetch","json","res","TravelMode","Bufferization","injectable","maxDuration","travelMode","walking","bufferization","isochrones","setTravelMode","setBufferizationMode","setMaxDuration","makeObservable","this","action","observable","container","Container","useInject","useState","get","store","bind","to","inSingletonScope","Radio","observer","value","defaultValue","onChange","className","name","checked","e","IsochroneSettings","cycling","driving","byAir","mapboxgl","workerClass","require","default","Map","mapStore","mapContainerRef","useRef","lng","setLng","setLat","zoom","useEffect","map","current","style","center","on","addSource","addLayer","marker","Marker","color","lngLat","setLngLat","addTo","getSource","setData","bufferLayer","buffer","point","units","areaBuilder","remove","ref","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a24184ca.chunk.js","sourcesContent":["export const accessToken = 'pk.eyJ1Ijoic2FwZmlyMCIsImEiOiJja284ZGk3aTkwNnZoMnBxbXM4eWl4Mmw4In0.XwtrCKXKgPC5fY_6a18XJg'\n\nexport const geojsonFormat = {\n    type: 'geojson' as const,\n    data: {\n        type: 'FeatureCollection',\n        features: [],\n    },\n}\n\nexport const isoLayer = {\n    id: 'isoLayer',\n    type: 'fill',\n    source: 'iso',\n    layout: {},\n    paint: {\n        'fill-color': '#5a3fc0',\n        'fill-opacity': 0.3,\n    },\n}","\nconst TYPES = {\n    MapStore: Symbol.for('MapStore'),\n};\n\nexport { TYPES };\n\n","import { accessToken } from \"../config\";\n\nconst urlBase = 'https://api.mapbox.com/isochrone/v1/mapbox/';\n\n\nexport async function getIso(lat: number, lon: number, profile='walking', minutes='10') {\n    const query = `${urlBase}${profile}/${lon},${lat}?contours_minutes=${minutes}&polygons=true&access_token=${accessToken}`;\n    const data = await fetch(query)\n    const res = await data.json()\n    return res\n}","export enum TravelMode {\n    walking,\n    cycling,\n    driving\n}\n\nexport enum Bufferization {\n    isochrones,\n    byAir,\n}","import { injectable } from \"inversify\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport { Bufferization, TravelMode } from \"../typing\";\n\n@injectable()\nexport class MapStore {\n    maxDuration = '10';\n    travelMode = TravelMode[TravelMode.walking] \n    bufferization = Bufferization[Bufferization.isochrones]\n\n    constructor() {\n        makeObservable(this, {\n            setMaxDuration: action,\n            setTravelMode: action,\n            setBufferizationMode: action,\n            maxDuration: observable,\n            travelMode: observable,\n            bufferization: observable,\n        })\n    }\n\n    setTravelMode = (travelMode: string) => {\n        this.travelMode = travelMode \n    }\n\n    setBufferizationMode = (bufferization: string) => {\n        this.bufferization = bufferization \n    }\n\n    setMaxDuration = (maxDuration: string) => {\n        this.maxDuration = maxDuration\n    }\n}","import { Container } from \"inversify\";\nimport 'reflect-metadata';\nimport { MapStore } from \"../Map/MapStore\";\nimport { TYPES } from \"./types\";\n\nconst container = new Container();\n\ncontainer.bind<MapStore>(TYPES.MapStore).to(MapStore).inSingletonScope();\n\n\nexport { container };\n","import { useState } from \"react\";\nimport { container } from \"../inversify/inversify.config\";\n\nexport function useInject<T>(id: string | symbol): T {\n    const [store, setStore] = useState(() => {\n        return container.get<T>(id);\n    });\n    return store;\n}","import { observer } from \"mobx-react\";\n\nexport type RadioProps = {\n    value: string;\n    defaultValue: string;\n    onChange: (val: string) => void;\n};\n\nexport const Radio = observer(({ value, defaultValue, onChange }: RadioProps) => {    \n    return <label className=\"toggle-container\">\n        <input\n            name={value}\n            type=\"radio\"\n            value={value}\n            checked={defaultValue === value}\n            onChange={(e) => onChange(defaultValue)}\n        />\n        <div className=\"toggle toggle--active-null toggle--null\">{defaultValue}</div>\n    </label>\n});\n","import { observer } from 'mobx-react';\nimport { TYPES } from '../inversify/types';\nimport { useInject } from '../services/hooks';\nimport { Bufferization, TravelMode } from '../typing';\nimport { MapStore } from './MapStore';\nimport { Radio } from './Radio';\n\nexport const IsochroneSettings = observer(() => {\n    const { setMaxDuration, setTravelMode, maxDuration, travelMode, bufferization, setBufferizationMode } = useInject<MapStore>(TYPES.MapStore);\n\n    return (\n        <div className=\"absolute fl my24 mx24 py24 px24 bg-gray-faint round\">\n            <form id=\"params\">\n                <h4 className=\"txt-m txt-bold mb6\">Choose a travel mode:</h4>\n                <div className=\"mb12 mr12 toggle-group align-center\">\n                    <Radio value={travelMode} defaultValue={TravelMode[TravelMode.walking]} onChange={setTravelMode} />\n                    <Radio value={travelMode} defaultValue={TravelMode[TravelMode.cycling]} onChange={setTravelMode} />\n                    <Radio value={travelMode} defaultValue={TravelMode[TravelMode.driving]} onChange={setTravelMode} />\n                </div>\n                <h4 className=\"txt-m txt-bold mb6\">Choose a maximum duration:</h4>\n                <div className=\"mb12 mr12 toggle-group align-center\">\n                    <Radio value={maxDuration} defaultValue={'10'} onChange={setMaxDuration} />\n                    <Radio value={maxDuration} defaultValue={'20'} onChange={setMaxDuration} />\n                    <Radio value={maxDuration} defaultValue={'30'} onChange={setMaxDuration} />\n                </div>\n                <h4 className=\"txt-m txt-bold mb6\">Choose a bufferization method:</h4>\n                <div className=\"mb12 mr12 toggle-group align-center\">\n                    <Radio value={bufferization} defaultValue={Bufferization[Bufferization.byAir]} onChange={setBufferizationMode} />\n                    <Radio value={bufferization} defaultValue={Bufferization[Bufferization.isochrones]} onChange={setBufferizationMode} />\n                </div>\n            </form>\n        </div>\n    );\n});\n","import { buffer, point } from '@turf/turf';\nimport mapboxgl from 'mapbox-gl';\nimport { observer } from 'mobx-react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { accessToken, geojsonFormat, isoLayer } from '../config';\nimport { TYPES } from '../inversify/types';\nimport { getIso } from '../services/ApiInteractionService';\nimport { useInject } from '../services/hooks';\nimport { Bufferization } from '../typing';\nimport { IsochroneSettings } from './IsochroneSettings';\nimport { MapStore } from './MapStore';\n\nmapboxgl.accessToken = accessToken;\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax \nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nconst Map = observer(() => {\n    const mapStore = useInject<MapStore>(TYPES.MapStore);\n\n    const mapContainerRef = useRef(null);\n\n    const [lng, setLng] = useState(44.5);\n    const [lat, setLat] = useState(48.7);\n    const [zoom, setZoom] = useState(11.5);\n    const bufferDistance = 500;\n\n    useEffect(() => {\n        const map = new mapboxgl.Map({\n            container: mapContainerRef.current!,\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [lng, lat],\n            zoom: zoom,\n        });\n\n        map.on('load', async function () {\n            map.addSource('iso', geojsonFormat as any);\n            map.addLayer(isoLayer as any, 'poi-label');\n        });\n\n        const marker = new mapboxgl.Marker({\n            color: '#314ccd',\n        });\n\n        map.on('click', async function (e) {\n            setLat(e.lngLat.lat);\n            setLng(e.lngLat.lng);\n            marker.setLngLat(e.lngLat).addTo(map);\n            const source = map.getSource('iso') as mapboxgl.GeoJSONSource;\n\n            const areaBuilder = {\n                [Bufferization[Bufferization.isochrones]]: async () => {\n                    const features = await getIso(\n                        e.lngLat.lat,\n                        e.lngLat.lng,\n                        mapStore.travelMode,\n                        mapStore.maxDuration,\n                    );\n                    source.setData(features);\n                },\n                [Bufferization[Bufferization.byAir]]: async () => {\n                    const bufferLayer = buffer(point([e.lngLat.lng, e.lngLat.lat]), bufferDistance, {\n                        units: 'meters',\n                    });\n                    source.setData(bufferLayer);\n                },\n            };\n\n            await areaBuilder[mapStore.bufferization]();\n\n            // const geoJson = map.querySourceFeatures('iso', { sourceLayer: 'isoLayer' });\n            // console.log(geoJson);\n        });\n\n        return () => map.remove();\n    }, []);\n\n    return (\n        <div>\n            <div className=\"map-container\" ref={mapContainerRef} />\n            <IsochroneSettings />\n        </div>\n    );\n});\n\nexport default Map;\n","import React from 'react';\nimport Map from '../Map/Map';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Map />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}